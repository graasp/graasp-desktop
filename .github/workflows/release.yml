name: Build/release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Setup provision profile
        run: ./.github/workflows/decrypt_secret.sh
        env:
          PROVISION_PROFILE_PASSPHRASE: ${{ secrets.PROVISION_PROFILE_PASSPHRASE }}

      - name: Yarn install
        run: yarn install --network-timeout 1000000 # allows to run without network error

      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        env:
          REACT_APP_GRAASP_API_HOST: ${{secrets.REACT_APP_GRAASP_API_HOST}}
          REACT_APP_GRAASP_HOST: ${{secrets.REACT_APP_GRAASP_HOST}}
          GOOGLE_API_KEY: ${{secrets.GOOGLE_API_KEY}}
          GOOGLE_ANALYTICS_ID: ${{secrets.GOOGLE_ANALYTICS_ID}}
          LOGGING_LEVEL: ${{secrets.LOGGING_LEVEL}}
          SENTRY_DSN: ${{secrets.SENTRY_DSN}}
          SENTRY_SUBMIT_URL: ${{secrets.SENTRY_SUBMIT_URL}}
          REACT_APP_SHOW_NOTIFICATIONS: toastr
        with:
          build_script_name: build:github
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.GITHUB_TOKEN }}

          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}
          mac_certs: ${{ secrets.mac_certs }}
          mac_certs_password: ${{ secrets.mac_certs_password }}
